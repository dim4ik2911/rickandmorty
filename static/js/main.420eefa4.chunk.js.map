{"version":3,"sources":["component/Cards/Cards.module.scss","component/Header/Header.module.scss","component/Header/index.js","component/Header/Header.jsx","component/Search/index.js","component/Search/Search.jsx","component/Cards/index.js","component/Cards/Cards.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Header","className","styles","name","Search","props","setFind","useState","search","setSearch","placeholder","value","onChange","e","f","target","Cards","characters","map","character","image","src","characteristic","status","species","location","id","App","setCharacters","find","letsFind","useEffect","fetch","then","response","json","data","results","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,WAAa,0BAA0B,UAAY,yBAAyB,MAAQ,qBAAqB,eAAiB,8BAA8B,KAAO,oBAAoB,OAAS,sBAAsB,QAAU,uBAAuB,SAAW,0B,mBCAhRD,EAAOC,QAAU,CAAC,KAAO,uB,iLCCVC,ECCA,WACb,OACE,mCACE,oBAAIC,UAAWC,IAAOC,KAAtB,+BCJSC,G,MCCA,SAACC,GACd,IAAQC,EAAYD,EAAZC,QACR,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAOA,OACE,mCACE,uBACEC,YAAY,yBACZC,MAAOH,EACPI,SAAU,SAACC,GAAD,OAVEC,EAUcD,EAAEE,OAAOJ,MATvCF,EAAUK,QACVR,EAAQQ,GAFO,IAACA,S,gBCLLE,ECCD,SAACX,GACb,IAAQY,EAAeZ,EAAfY,WACR,OACE,qBAAKhB,UAAWC,IAAOe,WAAvB,SACGA,GACCA,EAAWC,KAAI,SAACL,GACd,OACE,sBAAgBZ,UAAWC,IAAOiB,UAAlC,UACE,qBAAKlB,UAAWC,IAAOkB,MAAOC,IAAKR,EAAEO,QACrC,sBAAKnB,UAAWC,IAAOoB,eAAvB,UACE,oBAAIrB,UAAWC,IAAOC,KAAtB,SAA6BU,EAAEV,OAC/B,oBAAIF,UAAWC,IAAOqB,OAAtB,SAA+BV,EAAEU,SACjC,oBAAItB,UAAWC,IAAOsB,QAAtB,SAAgCX,EAAEW,UAClC,oBAAIvB,UAAWC,IAAOuB,SAAtB,SAAiCZ,EAAEY,SAAStB,YANtCU,EAAEa,UCoBTC,MAxBf,WACE,MAAoCpB,mBAAS,IAA7C,mBAAOU,EAAP,KAAmBW,EAAnB,KACA,EAAyBrB,mBAAS,KAAlC,mBAAOsB,EAAP,KAAaC,EAAb,KAaA,OAXAC,qBAAU,WAENC,MAAM,mDAAD,OAAoDH,IACtDI,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLR,EAAcQ,EAAKC,cAIxB,CAACR,IAGF,sBAAK5B,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAQK,QAAS,SAACQ,GAAD,OAAOgB,EAAShB,MACjC,cAAC,EAAD,CAAOG,WAAYA,QCbVqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.420eefa4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"characters\":\"Cards_characters__2A_mM\",\"character\":\"Cards_character__2UjLM\",\"image\":\"Cards_image__24f7Z\",\"characteristic\":\"Cards_characteristic__1I7Xi\",\"name\":\"Cards_name__FUJJN\",\"status\":\"Cards_status__OZoT3\",\"species\":\"Cards_species__3Yw5A\",\"location\":\"Cards_location__3SRnx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"Header_name__3ALo3\"};","import Header from \"./Header\";\n\nexport default Header;\n","import React from \"react\";\nimport styles from \"./Header.module.scss\";\n\nconst Header = () => {\n  return (\n    <>\n      <h1 className={styles.name}>Rick and Morty</h1>\n    </>\n  );\n};\n\nexport default Header;\n","import Search from \"./Search\";\n\nexport default Search;\n","import React, { useState } from \"react\";\nimport styles from \"./Search.module.scss\";\n\nconst Search = (props) => {\n  const { setFind } = props;\n  const [search, setSearch] = useState(\"\");\n\n  const onChange = (f) => {\n    setSearch(f);\n    setFind(f);\n  };\n\n  return (\n    <>\n      <input\n        placeholder=\"Find your character...\"\n        value={search}\n        onChange={(e) => onChange(e.target.value)}\n      />\n    </>\n  );\n};\n\nexport default Search;\n","import Cards from \"./Cards\";\n\nexport default Cards;\n","import React from \"react\";\nimport styles from \"./Cards.module.scss\";\n\nconst Cards = (props) => {\n  const { characters } = props;\n  return (\n    <div className={styles.characters}>\n      {characters &&\n        characters.map((e) => {\n          return (\n            <div key={e.id} className={styles.character}>\n              <img className={styles.image} src={e.image} />\n              <div className={styles.characteristic}>\n                <h1 className={styles.name}>{e.name}</h1>\n                <h2 className={styles.status}>{e.status}</h2>\n                <h3 className={styles.species}>{e.species}</h3>\n                <h3 className={styles.location}>{e.location.name}</h3>\n              </div>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default Cards;\n","import \"./App.css\";\nimport Header from \"./component/Header\";\nimport Search from \"./component/Search\";\nimport Cards from \"./component/Cards\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [characters, setCharacters] = useState([]);\n  const [find, letsFind] = useState(\" \");\n\n  useEffect(() => {\n    const getAllCharacters = () =>\n      fetch(`https://rickandmortyapi.com/api/character/?name=${find}`)\n        .then((response) => response.json())\n        .then((data) => {\n          setCharacters(data.results);\n        });\n\n    getAllCharacters();\n  }, [find]);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Search setFind={(f) => letsFind(f)} />\n      <Cards characters={characters} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}